// #region
const input: string = `FFBFFBFLLR
BFBFBFBRLR
FBFFBFBRRL
BBFFFBFLLR
BFFFFFBLRL
BFBBFBBRLR
FBFBFBBRRL
FBBBFBFLRL
BFFFFBBRRL
FBBBBBFLLR
FBFFFBFLLR
FFBBBFBLRR
BFFFBBFLRL
FFBBBFBLLL
FBFBBFFLRR
FBFBBBBLLR
FFBBBFFRLR
FBFBBFFRRL
FBBBFFFLRR
FFBBFFBLLR
BFBFBFBLLR
BFBBFFFLLL
FBFBBFBRRL
FFBBFFBLRR
FFFBFBBLRR
FFFFBBBRRL
BFBBBBFRLL
FBFBBFFLLR
FFFBFBBLLR
FFBFBBBRRL
BFFBBFFLLR
BFFFBBFLLR
FBBFBBFRRR
FFFBBFFRLL
BFBFBBFRRR
FBBFFBBRLR
FBFFBBFRRL
BFFFFBFLLR
BBFFBFBLRL
FBFBBBBLRL
FBFBFBFRLL
FFBFBFFLLR
BFBFBBBRLR
BFBBFFBLRR
FFBFBFFLLL
FFFFBBBLLR
FFBBBBBLRR
FFBFBBFLLR
BFFFBBBRLL
BFBFBFFLRR
FBBBBFFRLR
BFBFFBBRLL
FBFBBFBRRR
BFBFFBBLLL
BFBFBBFLRL
BBFFFFBLLR
FFFBFFFRLL
FBFFFBBRLL
FFFBBBBLRR
FBBBFBBLRL
BBFFBFFRRR
BFFBFFFLRR
FBBBBBBLLR
BFBBFFBLLL
BFFBBBFRLR
FBBBFFFLRL
BBFFFBFRRL
BBFFBFFRRL
FFBBFFFLRR
BBFFBFBRLR
BBFFFFBRLR
FFFFBBFLRL
FFBBBFBRRR
FFBFBBFLRR
FFFBBFBRRR
FBFFBFBRRR
BFFFFFBRRR
BFBFFBFLRL
FFBBBBBLLL
BFFFFBBRRR
FBFBFFBRLR
FBFFFFBLLR
FFFBFFFLLL
BFFFFFFLLR
BBFFFFBRRL
FBBFBBBRRL
BFFFFFFLLL
FBFBFFBLRR
FFFBBFFRLR
FBBFFBBLLL
BFBBBFFLRL
BFBFBBBRLL
FBFBBFFLLL
FFBBFFBRLL
BFFFFBBLLR
FFBBFBFLLL
FFFFBBBRRR
BFFFBBBLLL
BFFBBFBRLR
FFBBBFFLLR
FBBBFFBRLR
FFBFBFBRLL
FFFBFFFLRR
FFBBFBBLRL
BFFBFBFLRR
FFBFFFFRLR
BFBFFFFLLL
BFBBFBFRRR
BFBFBFFRLL
BFFFBFBRLL
FFBBFBFLRR
FFBFFFFRRL
BFBBBBFLLL
BFBFBFBRRR
FFFFBBFLRR
FBBBBFFLRL
BFBFFFBLRL
BFFBBFBRLL
FBFFBBFLLL
BFBBBBBLRL
FFBFBBBLLR
FBBFFBBLRR
FFBFFFBRRR
FFFBBBBRRR
FBBBBBBLRL
FFFBBFFLLL
BBFFBFBLRR
BFFBFFBRLR
FFBBFBBRLL
BFFBFBBRLR
FBFBFBFRRL
BFBBBFBRLL
FFFFBBBLRR
BBFFFFFLLR
FFBFFFFLLL
BFBBFBFRLR
FFBBBBFRLR
BFBFBBBLRL
FBBFFFFRLL
BFFFBBBLRL
FBBBBFBRLL
FFBFFFFRRR
BFFFBFBRLR
FBBBFBBLLL
FFBFFBBLLL
FBFFFBFRLL
FFFFBBBRLR
BBFFFBBLLL
BBFFFFBLRL
FBFBBBFRRL
BFBFFBBRLR
FBBFFBBLLR
BFFBBFFLLL
FFBFBBBLLL
BFFBFFFRRL
BFBBBFBRLR
FBFBBBFLLL
BFFBBBBLRR
BFFBFBFLLL
FFFBBBBLLR
BFFFBFFLLR
FFFBFBBRLL
FFBBBBFRRL
FBFBFBBLLR
BBFFBFFLRL
FBFBFBFLLR
FBFBFFFLLR
BFFFBFFLRR
BFFBFFBRRR
FFFFBBBLLL
FBBFBFFLLR
FFBBFBFRRL
BFBFBBBLRR
BFFFFFBRLR
BFBBBBFRRL
FFFBBBFLRR
FBBFBFBRLL
FFFBFFBRLR
BFFFFFFRRL
BFFBFBFRRL
BFBBBBBRRL
FBBFBFFRLL
FFBFBBBRRR
BBFFFBFLRL
FBBBFBFRRR
FBFFFFFLRL
FFFBBBBRLR
FBFFFFBLRR
FBBFFBBLRL
BFFFBBFRRL
FFFBFBFRRR
BFFBFFFRLL
BFBFBFFLLR
BFFBFBFRLL
FFBFFBBLRR
BFBBBBBLLR
FBBBFFBRRL
FFBBBFFRLL
BFFBFBFLLR
FFBBBBFRLL
BFBFFFBRLR
FBFFFFBLRL
FFFBBFBRLR
FFFBBFFLLR
BFBBBBFLRR
FFBFBFFRRR
BFFBBBBRLR
FBFFFFFRRL
BFFFFFBRLL
FFBBBBFLRL
BFFFBFBRRL
FFBFBFFLRL
FFFBFFBLLR
FBBBBFBRRL
FFFFBBFLLR
BFBFFBFRLR
FBFFBFBRLL
BFBBFBFLRL
FBBFBBFLLL
BFFFFFFRLL
FBBBBBBRLR
BFFFFBBRLL
FBFBBFFLRL
FBFFBBFLLR
FBFBFBBLLL
FFBBBFBLRL
FFBBBBFRRR
FFFFBBBLRL
BFBBBBFRLR
BFBFBBFLRR
FFFBBFFRRL
FFFBBFFRRR
FBBBBFBRRR
FFBBBBBRLL
FBBBFFBRLL
FBFBBFBLRR
BFFFBBBRRR
BFFBBBBLLR
BFFFFBFRLR
FFBFFFFLRR
BFBBBFBLRR
FBFFFBBRLR
FFBFFBFLRR
FFFBFBBLLL
BFFBFFBRLL
FBFFFBFLRR
FBBBFBFLLL
FBBFFBFLRR
FFBFBFBRLR
FFBBBBBRRR
BFFBFBBRRL
BFBFFBBRRR
BFFBBFBLRR
FBBFFFBRLL
FBBBBFFLLL
FBBBBBFLRR
FBFFBBBLLL
BFFBFFBLRR
BBFFFFBRRR
FBFFFBBLLL
FFFFBFBRRL
FBBFBBBRLR
FBFBFBFRLR
FBFFBFFRRR
BBFFFBFRLL
BFBBBFFRLR
FBBFFFFRRL
BBFFFFFLLL
FBBFFFBRLR
FFBFBFFRLR
BFBFBBFRRL
BFBBBBFLLR
BFFFBBFLRR
FBFBFBBLRR
FBBFFFBLRR
BFBFFBFLLR
BFBFBFBRRL
FBFBFFBLLR
FBBFBFBLRL
BFBFFFFRLR
BFFBBFBLLR
BFBBFBBRLL
BFBFBFFRRR
FFBBFBBLLR
FFBFBFFLRR
FFFBFFBLRR
BFBFFFFLLR
FBFBFFBRRL
FBFBFFFRRL
FBFFFFBRRR
FFBBFFFRRL
FFBFFBBRLR
BFBBBFFLRR
BBFFBFBRLL
FBBBBBFRRL
BBFFFFBRLL
FFBBBBFLLR
FBBBBFBRLR
FFBFFBFRLR
FFFFBFBRLR
FBBFBFBLRR
BFBBFBFLLR
FFBFBBFRRR
FFBBFBFRRR
FFBBBBBLLR
BFBBFFBLRL
BFFBBFFRLR
FFFBBFBRRL
BFFFFFBRRL
BFBBFFBRRL
BFFBFBBLLR
FBBFFFBRRR
FBBBFFFLLR
BFFFFFFRLR
FBBFFFFLRL
BFFFBBBLLR
BFFFBFBLLR
BFFFBFBLLL
FFFBFBFLRL
FBFBBBBRLR
FBFFFFFRLL
BFFBFFBLLL
FFBBFBBLLL
FBFFBFFRLL
FBFFBFBLLR
FFBBFBBLRR
FFBFFFFLLR
FBBFBFBRLR
FFBBBFBRRL
FBFBBFBRLL
FBFFBFFLLR
BFFBFBFRRR
FBBFBBBLLR
BFBBFFBRLR
BFFBBFBRRR
FBBBBFFLRR
BBFFFFFLRR
FBFFFFFRRR
FFBBFFFLLR
FFBFFBBRRL
FBBFBBFRRL
BFFFFFBLLL
FFFBBBFLLL
FBBBBFBLRR
FFFBBFFLRL
BFBBBFBLRL
FBBFBBFLRL
FBBFFBBRRR
FFBFBBFRLL
FBFFFFFLLL
FFFBBBFRLL
BFBBFBBRRR
FFFBBFBRLL
FFBBBFBRLL
FBBBBBBLRR
FBFBBBBRLL
FFBBFFFRRR
FFFBFFBLRL
FBBFBFFRLR
BFFFBFFRRR
BFFFBFFRLL
FBBBFFFRLR
FFBBFBBRRL
FFBBFFFRLL
FFBBFBFRLL
FBBFFBFLLL
FBFFBBBRRL
FBFBFFBRRR
FFBFBFFRLL
FFFBFFFRRR
FFBFFFBLRR
FFBFFFFRLL
FBFFFFBLLL
BFBBFFFLLR
BFBFBFBLRR
FBBFFFFLLR
FBBBBFBLLR
FBBBFBFRRL
BFBBBBBRLR
FBFFBFBLLL
FFBBFFFLLL
FFFFBBFRRR
FBFBBBFLRR
BBFFBBFLLL
FFBBBFBLLR
FBBFFFFLRR
FBBFBFBLLR
FFBFFFBLRL
FBFBBBFLLR
BFBBBFFLLR
BFFFFBBRLR
FBBFBFBLLL
FBBFFBFRLR
BFBBFFBRLL
FBBBBFFLLR
BFFBBBBLRL
FBBFBFBRRL
FBBFFBFLRL
FBBBFFFRRL
BFBFBFFLRL
BFBFFFFLRR
BBFFBFBLLL
BBFFBFFLLR
FBFBBFFRLL
BFFBBBFLLR
FFBFBBFRRL
FBFFBBBLRR
FBBBFBBLLR
FBFFFBBRRL
FFBBBBFLRR
BFBFFBFLRR
FFFBBBFLRL
FBFFBFFRRL
FBBFBFFLRL
FBBFFFBLRL
FFBBBFFRRR
BBFFFBFLLL
FBFFBFBLRR
BBFFBFBLLR
FBFFFFBRLR
BFFFFFFLRL
FBBFBBBLLL
BFBFFBBLRR
FFBBFFBRRL
BFFFBFBLRL
BFBBBBBRLL
FBFFFBBLRR
BFBBFBBLLR
FBBBFFBLLL
FBFFFBFRLR
FFBBBFFRRL
FFBFBBFLRL
FFBFBFBLLR
FBBFFBFRLL
FFBBBFFLLL
BFBBBBBLLL
FBBFFFBLLL
BFBFFFBLRR
FFBFFBFLRL
BFFFBBBRRL
BFBFBBBLLR
BFBFFFFLRL
BFBFBFFRLR
FBBFBBBRLL
FFBFBBBLRL
FBBBFFFRRR
FBBFBFFRRR
FFFFBBBRLL
FBFFBBBLRL
FBBBFBBRRL
FBFFBBBLLR
FFFBBBFRLR
BFBFBFBLLL
BBFFFFFRRR
BFBBFBFRLL
FBBBFBBLRR
BFFFFBFLRL
FBBBFFBLRL
BBFFBFFLRR
FFBFBFFRRL
FBFFFBBLRL
FFFFBBFRLL
FFBFFFBLLR
FBBBFBFLRR
FFFBFFBRRR
BFFBBBFLRR
FBFFBFBLRL
FFBFFFBRLR
FFBFFFBRRL
FFBBFFBLRL
FBFBFBBRLR
FFFBBBBLLL
BFBBBFFLLL
FFBBFBFLRL
BFBFFFBRLL
BFFBFFBRRL
FBBFFFFLLL
FBFFFFBRRL
FFFBFFFLLR
FBFFFBFLRL
FFBFBFBLRL
FBBBFFBLRR
BFBFFBBRRL
BBFFFFFLRL
BFFBBBFRRR
BFFFBBFRLR
BFBBBBBLRR
BFFFBFBLRR
FBBBBFFRLL
BFBBFFFLRR
BBFFFBFLRR
FBFFBBFRLL
FBFFFFFLRR
FBBBBBFLLL
FBFBFBBRRR
FBFBBFBLRL
BFBBFFBRRR
BBFFBFFLLL
FBBFBBFLLR
BFFBBFFRLL
FBFBBBBRRL
FBBFBBFRLL
FBBFBBFLRR
FBBFFBBRRL
FFFBBFFLRR
BFBBFBFLRR
BFBFBFFRRL
FFBBFFFRLR
FBFBBBBLRR
BBFFFFBLLL
BBFFFFFRLR
FBFBFFBLRL
FBBFBBBLRR
BFBFFBFRRL
BFFFFFFLRR
FFFBBBFLLR
FBFFBFFLLL
BFFBFFFRLR
FBBFFBFRRR
FFFBFFFRRL
FFFFBBFLLL
BFBFBBFRLL
BFFFFBBLRL
FFFBFBFLLR
FBBBFBFRLR
BFBBBFBLLR
BFFBFBFLRL
BFBFFFBLLL
FFBFFBBLRL
BFBBFFFRRR
FFFBFFBLLL
BBFFFFBLRR
FFBBFBFLLR
FBFBBBBRRR
FBFBBBFLRL
BFFBFFFLLR
FBFBFFFRLL
FBBBBFBLLL
FBBBBBBRRR
FBBBBBFLRL
BFBBFFFRLL
FFFBFFFRLR
FFBFFBBLLR
FFBFBBBRLL
BBFFFFFRLL
FFFBFBBRLR
FFBFBBBRLR
BFFFFBFLRR
BBFFFBBLRL
FBBBBFFRRL
FBBFBBBRRR
BFBFFFFRLL
FBBBBBBRRL
BFFBFFBLRL
BFFBBFBRRL
FBFFFBBRRR
BFFBBFBLLL
BFBFBFBRLL
BBFFFBBRLL
FBFBBBBLLL
BBFFFBBLRR
BFFFFBFRRL
BFBBFBFLLL
FBBBFBBRLR
BFBBFBBLRL
BFBBBFBRRL
FBFFBBBRLL
FBBBFBBRLL
FFBBBBBRRL
FBFBBBFRLL
BFFFFFBLLR
BFFBBBBRRR
BFBBFBBLLL
FFBFBBBLRR
FFBFBFBRRR
BFBFFFBRRL
FBBBFFBRRR
BFBFBBBLLL
BBFFFBBRLR
BBFFFBBRRL
FBBBBFBLRL
FBBBBFFRRR
FBBBFFBLLR
BFFFFBFLLL
BFBFBFFLLL
BFFFFBFRLL
BFFBFBBLRL
FFBFFBBRLL
FBFBBFFRLR
BFBFFFBRRR
FBFFBFBRLR
FBBFBFFLLL
FBFFBBFLRR
FFBFBFBLRR
FFBBFFBRRR
FBBFFFBLLR
FBFFFBFRRR
BFBFFFFRRL
FBBBBBFRRR
FFFFBFBRRR
FFBBBBBLRL
FBFBFFFLRR
FBBBFFFLLL
BFFFBFFRLR
FFBFFBFRRL
FBFBFFFRRR
FFBFBFBLLL
BFBBBFFRRL
BFBFBFBLRL
BFFFBFFLRL
FBBBBBFRLR
FBFBBFBLLL
FFFBBBBLRL
FBBFBFFLRR
BFBBBFBRRR
FBBBFBBRRR
FFFBFBFRLL
FFBBBBFLLL
FBFFBFFRLR
FBFBFBFLLL
FBFFFFBRLL
FBBBBBBRLL
FBBBBBFRLL
FBBFFBFLLR
BFFBBBFRRL
FBFFFBFLLL
FBBBFFFRLL
BFFFBBBRLR
FBFBBBFRRR
BFFBFBBRLL
FBBFFFBRRL
FBFFBBBRLR
BFBFFBBLRL
BFFBBFFLRL
FBFBBBFRLR
BBFFFBBLLR
FFFBFFBRLL
BFBFBBFLLL
BFFBBFBLRL
FFFBBFBLRL
BFBBBFFRRR
FBFBFFFRLR
BFFBBFFLRR
BFFBBBFLLL
FBFFBBBRRR
FBFBFFFLLL
FFBFBBFLLL
FBFFFFFLLR
BFBBFBFRRL
BFBBBBBRRR
BFFBFBBLLL
BFFFBFBRRR
FFFBFBFLLL
FFBFFFBRLL
FBBFBFBRRR
FBBBBBBLLL
FBFBFFFLRL
FFFBFFBRRL
FBFBBFFRRR
FFBBFBFRLR
BFFFFBBLLL
FBBFBFFRRL
BFFBFFFRRR
BFFBFFFLRL
BFBBBBFRRR
BFBFBBBRRL
FFFBBFBLLL
FBBFFBBRLL
BFBBBFFRLL
BFFFBBFRRR
FBFBFBBRLL
BFFFBFFRRL
FFFBFBBLRL
FBFFFBBLLR
BFFFBBFLLL
BFFBFFFLLL
BFFBBBBLLL
BFFFFFFRRR
FFBFFBFRLL
FBBFFBFRRL
BBFFFFFRRL
FFFBBFBLRR
BFBFFBFLLL
FBFBBFBRLR
BFBBFBBLRR
FBFFBFFLRL
BFBFFFBLLR
FFFBBBFRRR
FFBBBFFLRR
FBFBFFBLLL
BFBFBBFRLR
FBFBFBFRRR
FFBBFBBRRR
FBBFFFFRLR
FBFBFBBLRL
FBBFFFFRRR
FFBBFFBRLR
BFBFBBFLLR
BFFBFBFRLR
BBFFBFFRLL
BFFBBFFRRR
BFFFFBFRRR
FBFBFBFLRL
FFBFFBFRRR
FBBFBBBLRL
FFFBBBFRRL
FBFFBFFLRR
FFBFBBFRLR
BBFFBFBRRL
FBFFBBFLRL
FFFFBBFRRL
BFBFFBFRLL
BFBBFBBRRL
FFFBBFBLLR
FFBFFBFLLL
FFBBBBBRLR
BFFFFFBLRR
BFFBBBFLRL
BFBBFFBLLR
FBFFFFFRLR
FFFFBBFRLR
FBFFFBFRRL
BFFBBBBRRL
FFBFFFFLRL
BFBBFFFRRL
FFFBBBBRLL
BFBFBBBRRR
BBFFFBFRLR
BFFBFFBLLR
FBFBBFBLLR
BFFBFBBRRR
BBFFFBFRRR
BFFBBFFRRL
FBBBFBFRLL
FFBFFFBLLL
BFFBBBFRLL
FBFFBBFRRR
FFFBFBFLRR
BFFBFBBLRR
FBFFBBFRLR
FFFBFBFRRL
FFFBBBBRRL
BFBFFBBLLR
BFBFFFFRRR
FFBBBFFLRL
FBBFBBFRLR
FFFBFFFLRL
BFFBBBBRLL
BFBBFFFRLR
FFBFFBBRRR
FBFBFFBRLL
BFFFBFFLLL
FFBFBFBRRL
FFFBFBBRRL
BFBBBBFLRL
BBFFBFFRLR
BFFFBBFRLL
BFFFBBBLRR
BFBFFBFRRR
FBBBFBFLLR
BFBBFFFLRL
FFFBFBFRLR
FBFBFBFLRR
BBFFBFBRRR
BBFFFBBRRR
FFBBFFBLLL
BFBBBFBLLL
FFBBFFFLRL
FFFBFBBRRR
FFBBBFBRLR
FFBBFBBRLR`
// #endregion

const arr: string[] = input.split(/\n/)

const calcSeatId = (pass: string): number => {
  // pass is binary representation of a number
  // B=1, F=0; R=1, L=0
  const passBi = pass.replace(/[FL]/g, "0").replace(/[BR]/g, "1")
  //console.log(passBi)
  // first 7 is one num, second 3 is another
  const row = parseInt(passBi.substring(0, 7), 2)
  const seat = parseInt(passBi.substring(7, 10), 2)
  // check my conversions
  //console.log("row " + row + " seat " + seat)
  return row * 8 + seat
}

const arrOfNums: number[] = arr
  .map((str) => calcSeatId(str))
  .sort((a, b) => a - b)

let indexer: number = 0

for (let i = arrOfNums[0]; i < arrOfNums[arrOfNums.length - 1]; i++) {
  if (arrOfNums[indexer] !== i) {
    console.log(i)
    break
  }
  indexer++
}

// #region

// const splitFront = (arr: number[], index: number) => arr.slice(0, index)

// const splitBack = (arr: number[], index: number) => arr.slice(index, arr.length)

// const binaryDivide: any = arr.reduce((arr, str) => {
//   let firstValue: number = 0
//   const firstSeven: string = str.slice(0, 7)
//   let rowRange: Array<number> = []
//   for (let i = 0; i < 128; i++) rowRange.push(i)
//   let indexNum: number = 64
//   for (let i = 0; i < firstSeven.length - 1; i++) {
//     if (firstSeven[i] === "F") rowRange = splitFront(rowRange, indexNum)
//     else if (firstSeven[i] === "B") rowRange = splitBack(rowRange, indexNum)
//     indexNum = indexNum / 2
//     firstValue = rowRange[0]
//   }
//   arr.push(firstValue)
//   return arr

//     const lastThree: string = str.slice(7)
// }, [])

// def split_front(list, index):
//     return list[:index]
// def split_back(list, index):
//     return list[index:]
// def get_row_value(input_list):
//     row_list = []
//     for value in input_list:
//         updated_val = list(range(128))
//         index = 64
//         for i in range(0,7):
//             if value[i] == "F":
//                 updated_val = split_front(updated_val, index)
//             if value[i] == "B":
//                 updated_val = split_back(updated_val, index)
//             index = int(index / 2)
//         row_list.append(updated_val[0])
//     return row_list

// #endregion
